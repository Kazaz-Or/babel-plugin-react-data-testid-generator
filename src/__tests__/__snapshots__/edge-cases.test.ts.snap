// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`babel-plugin-react-data-testid-generator - Edge Cases 1. should handle components with no JSX elements: 1. should handle components with no JSX elements 1`] = `


function TextOnlyComponent() {
  return "Just text";
}

const NumberComponent = () => 42;

function NullComponent() {
  return null;
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

function TextOnlyComponent() {
  return "Just text";
}
const NumberComponent = () => 42;
function NullComponent() {
  return null;
}

`;

exports[`babel-plugin-react-data-testid-generator - Edge Cases 2. should handle mixed JSX and non-JSX returns: 2. should handle mixed JSX and non-JSX returns 1`] = `


function MixedReturns({ condition }) {
  if (condition === 'text') {
    return "Just text";
  }
  if (condition === 'number') {
    return 123;
  }
  return <div>JSX content</div>;
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

function MixedReturns({ condition }) {
  if (condition === "text") {
    return "Just text";
  }
  if (condition === "number") {
    return 123;
  }
  return <div data-testid="MixedReturns.div">JSX content</div>;
}

`;

exports[`babel-plugin-react-data-testid-generator - Edge Cases 3. should handle self-closing elements: 3. should handle self-closing elements 1`] = `


function SelfClosingElements() {
  return (
    <div>
      <img src="test.jpg" />
      <br />
      <input type="text" />
      <hr />
      <img src="test2.jpg" />
    </div>
  );
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

function SelfClosingElements() {
  return (
    <div data-testid="SelfClosingElements.div">
      <img data-testid="SelfClosingElements.img" src="test.jpg" />
      <br data-testid="SelfClosingElements.br" />
      <input data-testid="SelfClosingElements.input" type="text" />
      <hr data-testid="SelfClosingElements.hr" />
      <img data-testid="SelfClosingElements.img2" src="test2.jpg" />
    </div>
  );
}

`;

exports[`babel-plugin-react-data-testid-generator - Edge Cases 4. should handle elements with complex children: 4. should handle elements with complex children 1`] = `


function ComplexChildren() {
  return (
    <div>
      <span>
        Text content
        <strong>Bold text</strong>
        More text
      </span>
      <div>
        {items.map(item => (
          <p key={item.id}>{item.name}</p>
        ))}
      </div>
    </div>
  );
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

function ComplexChildren() {
  return (
    <div data-testid="ComplexChildren.div">
      <span data-testid="ComplexChildren.span">
        Text content
        <strong data-testid="ComplexChildren.strong">Bold text</strong>
        More text
      </span>
      <div data-testid="ComplexChildren.div2">
        {items.map((item) => (
          <p data-testid="ComplexChildren.p" key={item.id}>
            {item.name}
          </p>
        ))}
      </div>
    </div>
  );
}

`;

exports[`babel-plugin-react-data-testid-generator - Edge Cases 5. should handle elements with spread props: 5. should handle elements with spread props 1`] = `


function SpreadProps(props) {
  const buttonProps = { onClick: () => {}, disabled: false };
  return (
    <div>
      <button {...buttonProps}>Button 1</button>
      <span {...props}>Span with spread</span>
      <button {...buttonProps} type="submit">Button 2</button>
    </div>
  );
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

function SpreadProps(props) {
  const buttonProps = {
    onClick: () => {},
    disabled: false,
  };
  return (
    <div data-testid="SpreadProps.div">
      <button data-testid="SpreadProps.button" {...buttonProps}>
        Button 1
      </button>
      <span data-testid="SpreadProps.span" {...props}>
        Span with spread
      </span>
      <button data-testid="SpreadProps.button2" {...buttonProps} type="submit">
        Button 2
      </button>
    </div>
  );
}

`;

exports[`babel-plugin-react-data-testid-generator - Edge Cases 6. should handle elements with multiple existing data attributes: 6. should handle elements with multiple existing data attributes 1`] = `


function MultipleDataAttrs() {
  return (
    <div>
      <button 
        data-testid="existing-button"
        data-cy="cypress-button"
        data-custom="custom-value"
      >
        Button with existing attrs
      </button>
      <span data-other="different-attr">
        Span with different attr
      </span>
      <div>New element</div>
    </div>
  );
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

function MultipleDataAttrs() {
  return (
    <div data-testid="MultipleDataAttrs.div">
      <button
        data-testid="existing-button"
        data-cy="cypress-button"
        data-custom="custom-value"
      >
        Button with existing attrs
      </button>
      <span data-testid="MultipleDataAttrs.span" data-other="different-attr">
        Span with different attr
      </span>
      <div data-testid="MultipleDataAttrs.div2">New element</div>
    </div>
  );
}

`;

exports[`babel-plugin-react-data-testid-generator - Edge Cases 7. should handle very deeply nested structures: 7. should handle very deeply nested structures 1`] = `


function VeryDeepNesting() {
  return (
    <div>
      <div>
        <div>
          <div>
            <div>
              <span>Very deep span</span>
              <button>Very deep button</button>
            </div>
            <span>Level 4 span</span>
          </div>
          <button>Level 3 button</button>
        </div>
        <div>
          <span>Level 2 span</span>
        </div>
      </div>
      <span>Top level span</span>
    </div>
  );
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

function VeryDeepNesting() {
  return (
    <div data-testid="VeryDeepNesting.div">
      <div data-testid="VeryDeepNesting.div2">
        <div data-testid="VeryDeepNesting.div3">
          <div data-testid="VeryDeepNesting.div4">
            <div data-testid="VeryDeepNesting.div5">
              <span data-testid="VeryDeepNesting.span">Very deep span</span>
              <button data-testid="VeryDeepNesting.button">
                Very deep button
              </button>
            </div>
            <span data-testid="VeryDeepNesting.span2">Level 4 span</span>
          </div>
          <button data-testid="VeryDeepNesting.button2">Level 3 button</button>
        </div>
        <div data-testid="VeryDeepNesting.div6">
          <span data-testid="VeryDeepNesting.span3">Level 2 span</span>
        </div>
      </div>
      <span data-testid="VeryDeepNesting.span4">Top level span</span>
    </div>
  );
}

`;

exports[`babel-plugin-react-data-testid-generator - Edge Cases 8. should handle anonymous export with class: 8. should handle anonymous export with class 1`] = `


export default class extends Component {
  render() {
    return (
      <div>
        <h1>Anonymous class</h1>
        <button>Click me</button>
      </div>
    );
  }
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

export default class extends Component {
  render() {
    return (
      <div data-testid="Component.div">
        <h1 data-testid="Component.h1">Anonymous class</h1>
        <button data-testid="Component.button">Click me</button>
      </div>
    );
  }
}

`;

exports[`babel-plugin-react-data-testid-generator - Edge Cases 9. should handle empty attributes array configuration: 9. should handle empty attributes array configuration 1`] = `


function NoAttributesComponent() {
  return (
    <div>
      <button>Should not get attributes</button>
      <span>Neither should this</span>
    </div>
  );
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

function NoAttributesComponent() {
  return (
    <div>
      <button>Should not get attributes</button>
      <span>Neither should this</span>
    </div>
  );
}

`;

exports[`babel-plugin-react-data-testid-generator - Edge Cases 10. should handle fragments and React.Fragment: 10. should handle fragments and React.Fragment 1`] = `


function FragmentComponent() {
  return (
    <>
      <div>In fragment</div>
      <React.Fragment>
        <span>In React.Fragment</span>
        <button>Fragment button</button>
      </React.Fragment>
    </>
  );
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

function FragmentComponent() {
  return (
    <>
      <div data-testid="FragmentComponent.div">In fragment</div>
      <React.Fragment data-testid="FragmentComponent.Fragment">
        <span data-testid="FragmentComponent.span">In React.Fragment</span>
        <button data-testid="FragmentComponent.button">Fragment button</button>
      </React.Fragment>
    </>
  );
}

`;
