// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`babel-plugin-react-data-testid-generator - Uniqueness Tests 1. should generate unique IDs for multiple same elements in one component: 1. should generate unique IDs for multiple same elements in one component 1`] = `


function MultipleButtons() {
  return (
    <div>
      <button>First</button>
      <button>Second</button>
      <button>Third</button>
    </div>
  );
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

function MultipleButtons() {
  return (
    <div data-testid="MultipleButtons.div">
      <button data-testid="MultipleButtons.button">First</button>
      <button data-testid="MultipleButtons.button2">Second</button>
      <button data-testid="MultipleButtons.button3">Third</button>
    </div>
  );
}

`;

exports[`babel-plugin-react-data-testid-generator - Uniqueness Tests 2. should handle deeply nested duplicate elements: 2. should handle deeply nested duplicate elements 1`] = `


function DeepNesting() {
  return (
    <div>
      <div>
        <div>
          <span>Deep 1</span>
          <span>Deep 2</span>
        </div>
        <div>
          <span>Deep 3</span>
        </div>
      </div>
      <div>
        <span>Top level span</span>
      </div>
    </div>
  );
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

function DeepNesting() {
  return (
    <div data-testid="DeepNesting.div">
      <div data-testid="DeepNesting.div2">
        <div data-testid="DeepNesting.div3">
          <span data-testid="DeepNesting.span">Deep 1</span>
          <span data-testid="DeepNesting.span2">Deep 2</span>
        </div>
        <div data-testid="DeepNesting.div4">
          <span data-testid="DeepNesting.span3">Deep 3</span>
        </div>
      </div>
      <div data-testid="DeepNesting.div5">
        <span data-testid="DeepNesting.span4">Top level span</span>
      </div>
    </div>
  );
}

`;

exports[`babel-plugin-react-data-testid-generator - Uniqueness Tests 3. should reset counters between different components: 3. should reset counters between different components 1`] = `


function FirstComponent() {
  return (
    <div>
      <button>Button 1</button>
      <button>Button 2</button>
    </div>
  );
}

function SecondComponent() {
  return (
    <div>
      <button>Button A</button>
      <button>Button B</button>
    </div>
  );
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

function FirstComponent() {
  return (
    <div data-testid="FirstComponent.div">
      <button data-testid="FirstComponent.button">Button 1</button>
      <button data-testid="FirstComponent.button2">Button 2</button>
    </div>
  );
}
function SecondComponent() {
  return (
    <div data-testid="SecondComponent.div">
      <button data-testid="SecondComponent.button">Button A</button>
      <button data-testid="SecondComponent.button2">Button B</button>
    </div>
  );
}

`;

exports[`babel-plugin-react-data-testid-generator - Uniqueness Tests 4. should handle mixed element types with counters: 4. should handle mixed element types with counters 1`] = `


function MixedElements() {
  return (
    <div>
      <span>Span 1</span>
      <button>Button 1</button>
      <span>Span 2</span>
      <div>Div 1</div>
      <button>Button 2</button>
      <div>Div 2</div>
    </div>
  );
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

function MixedElements() {
  return (
    <div data-testid="MixedElements.div">
      <span data-testid="MixedElements.span">Span 1</span>
      <button data-testid="MixedElements.button">Button 1</button>
      <span data-testid="MixedElements.span2">Span 2</span>
      <div data-testid="MixedElements.div2">Div 1</div>
      <button data-testid="MixedElements.button2">Button 2</button>
      <div data-testid="MixedElements.div3">Div 2</div>
    </div>
  );
}

`;

exports[`babel-plugin-react-data-testid-generator - Uniqueness Tests 5. should handle JSX member expressions with counters: 5. should handle JSX member expressions with counters 1`] = `


function ModalComponent() {
  return (
    <Modal.Container>
      <Modal.Header>Title</Modal.Header>
      <Modal.Body>Content</Modal.Body>
      <Modal.Header>Second header</Modal.Header>
    </Modal.Container>
  );
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

function ModalComponent() {
  return (
    <Modal.Container data-testid="ModalComponent.Container">
      <Modal.Header data-testid="ModalComponent.Header">Title</Modal.Header>
      <Modal.Body data-testid="ModalComponent.Body">Content</Modal.Body>
      <Modal.Header data-testid="ModalComponent.Header2">
        Second header
      </Modal.Header>
    </Modal.Container>
  );
}

`;

exports[`babel-plugin-react-data-testid-generator - Uniqueness Tests 6. should handle class components with duplicate elements: 6. should handle class components with duplicate elements 1`] = `


class FormClass extends React.Component {
  render() {
    return (
      <form>
        <input type="text" />
        <input type="email" />
        <input type="password" />
        <div>
          <input type="submit" />
        </div>
      </form>
    );
  }
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

class FormClass extends React.Component {
  render() {
    return (
      <form data-testid="FormClass.form">
        <input data-testid="FormClass.input" type="text" />
        <input data-testid="FormClass.input2" type="email" />
        <input data-testid="FormClass.input3" type="password" />
        <div data-testid="FormClass.div">
          <input data-testid="FormClass.input4" type="submit" />
        </div>
      </form>
    );
  }
}

`;

exports[`babel-plugin-react-data-testid-generator - Uniqueness Tests 7. should handle arrow functions assigned to const with duplicates: 7. should handle arrow functions assigned to const with duplicates 1`] = `


const ListComponent = () => (
  <ul>
    <li>Item 1</li>
    <li>Item 2</li>
    <li>Item 3</li>
  </ul>
);
      

      ↓ ↓ ↓ ↓ ↓ ↓

const ListComponent = () => (
  <ul data-testid="ListComponent.ul">
    <li data-testid="ListComponent.li">Item 1</li>
    <li data-testid="ListComponent.li2">Item 2</li>
    <li data-testid="ListComponent.li3">Item 3</li>
  </ul>
);

`;

exports[`babel-plugin-react-data-testid-generator - Uniqueness Tests 8. should maintain counters across multiple return statements: 8. should maintain counters across multiple return statements 1`] = `


function ConditionalForm({ isLoggedIn }) {
  if (isLoggedIn) {
    return (
      <div>
        <button>Logout</button>
        <span>Welcome</span>
      </div>
    );
  }
  
  return (
    <div>
      <button>Login</button>
      <button>Register</button>
      <span>Please sign in</span>
    </div>
  );
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

function ConditionalForm({ isLoggedIn }) {
  if (isLoggedIn) {
    return (
      <div data-testid="ConditionalForm.div">
        <button data-testid="ConditionalForm.button">Logout</button>
        <span data-testid="ConditionalForm.span">Welcome</span>
      </div>
    );
  }
  return (
    <div data-testid="ConditionalForm.div2">
      <button data-testid="ConditionalForm.button2">Login</button>
      <button data-testid="ConditionalForm.button3">Register</button>
      <span data-testid="ConditionalForm.span2">Please sign in</span>
    </div>
  );
}

`;

exports[`babel-plugin-react-data-testid-generator - Uniqueness Tests 9. should handle existing attributes and not override them: 9. should handle existing attributes and not override them 1`] = `


function ExistingAttrs() {
  return (
    <div>
      <button data-testid="keep-this">Button 1</button>
      <button>Button 2</button>
      <button data-testid="keep-this-too">Button 3</button>
    </div>
  );
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

function ExistingAttrs() {
  return (
    <div data-testid="ExistingAttrs.div">
      <button data-testid="keep-this">Button 1</button>
      <button data-testid="ExistingAttrs.button2">Button 2</button>
      <button data-testid="keep-this-too">Button 3</button>
    </div>
  );
}

`;

exports[`babel-plugin-react-data-testid-generator - Uniqueness Tests 10. should work with custom attributes and maintain uniqueness: 10. should work with custom attributes and maintain uniqueness 1`] = `


function CustomAttrsComponent() {
  return (
    <div>
      <button>Test 1</button>
      <button>Test 2</button>
    </div>
  );
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

function CustomAttrsComponent() {
  return (
    <div data-cy="CustomAttrsComponent.div">
      <button data-cy="CustomAttrsComponent.button">Test 1</button>
      <button data-cy="CustomAttrsComponent.button2">Test 2</button>
    </div>
  );
}

`;
