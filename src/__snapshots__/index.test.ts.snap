// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`babel-plugin-react-data-testid-generator 1. function Component: 1. function Component 1`] = `


function Div() {
  return <div />
}

function Nested() {
  return (
    <div>
      hello
      <div>world</div>
    </div>
  )
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

function Div() {
  return <div data-testid="Div.div" />;
}
function Nested() {
  return (
    <div data-testid="Nested.div">
      hello
      <div data-testid="Nested.div2">world</div>
    </div>
  );
}

`;

exports[`babel-plugin-react-data-testid-generator 2. arrow function: 2. arrow function 1`] = `


const Div = () => <div />

const DivBody = () => {
  return <div />
}

const Div2 = () => <Div />
      

      ↓ ↓ ↓ ↓ ↓ ↓

const Div = () => <div data-testid="Div.div" />;
const DivBody = () => {
  return <div data-testid="DivBody.div" />;
};
const Div2 = () => <Div data-testid="Div2.Div" />;

`;

exports[`babel-plugin-react-data-testid-generator 3. with children: 3. with children 1`] = `


const Div = ({ children }) => <div>{children}</div>

function Div2({ children }) {
  return <div>{children}</div>
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

const Div = ({ children }) => <div data-testid="Div.div">{children}</div>;
function Div2({ children }) {
  return <div data-testid="Div2.div">{children}</div>;
}

`;

exports[`babel-plugin-react-data-testid-generator 4. class components: 4. class components 1`] = `


class MyComponent extends React.Component {
  render() {
    return <div>Hello</div>
  }
}

class NestedClass extends React.Component {
  render() {
    return (
      <div>
        <span>Nested</span>
      </div>
    )
  }
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

class MyComponent extends React.Component {
  render() {
    return <div data-testid="MyComponent.div">Hello</div>;
  }
}
class NestedClass extends React.Component {
  render() {
    return (
      <div data-testid="NestedClass.div">
        <span data-testid="NestedClass.span">Nested</span>
      </div>
    );
  }
}

`;

exports[`babel-plugin-react-data-testid-generator 5. fragment: 5. fragment 1`] = `


import React from 'react'

function Items() {
  return <>
    {items.map((item) => <Item key={item.key} />)}
  </>
}

const Items2 = () => <React.Fragment>hello</React.Fragment>
      

      ↓ ↓ ↓ ↓ ↓ ↓

import React from "react";
function Items() {
  return (
    <>
      {items.map((item) => (
        <Item data-testid="Items.Item" key={item.key} />
      ))}
    </>
  );
}
const Items2 = () => (
  <React.Fragment data-testid="Items2.Fragment">hello</React.Fragment>
);

`;

exports[`babel-plugin-react-data-testid-generator 6. with data-testid: 6. with data-testid 1`] = `


const Div = () => <div data-testid="hello" />
    

      ↓ ↓ ↓ ↓ ↓ ↓

const Div = () => <div data-testid="hello" />;

`;

exports[`babel-plugin-react-data-testid-generator 7. export default: 7. export default 1`] = `


export default () => {
  return <div>hello</div>
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

export default () => {
  return <div>hello</div>;
};

`;

exports[`babel-plugin-react-data-testid-generator 8. jsx spread attribute: 8. jsx spread attribute 1`] = `


const Div = (props) => {
  return <div {...props}>hello</div>
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

const Div = (props) => {
  return (
    <div data-testid="Div.div" {...props}>
      hello
    </div>
  );
};

`;

exports[`babel-plugin-react-data-testid-generator 9. nested components with unique IDs: 9. nested components with unique IDs 1`] = `


const Card = () => {
  return (
    <div>
      <h1>Title</h1>
      <div>
        <button>Click me</button>
        <span>Text</span>
      </div>
    </div>
  )
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

const Card = () => {
  return (
    <div data-testid="Card.div">
      <h1 data-testid="Card.h1">Title</h1>
      <div data-testid="Card.div2">
        <button data-testid="Card.button">Click me</button>
        <span data-testid="Card.span">Text</span>
      </div>
    </div>
  );
};

`;

exports[`babel-plugin-react-data-testid-generator 10. JSX member expressions: 10. JSX member expressions 1`] = `


const Dialog = () => {
  return (
    <Modal.Header>
      <Modal.Title>Hello</Modal.Title>
      <Modal.Body>
        <Button.Primary>Click</Button.Primary>
      </Modal.Body>
    </Modal.Header>
  )
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

const Dialog = () => {
  return (
    <Modal.Header data-testid="Dialog.Header">
      <Modal.Title data-testid="Dialog.Title">Hello</Modal.Title>
      <Modal.Body data-testid="Dialog.Body">
        <Button.Primary data-testid="Dialog.Primary">Click</Button.Primary>
      </Modal.Body>
    </Modal.Header>
  );
};

`;

exports[`babel-plugin-react-data-testid-generator 11. anonymous function expressions: 11. anonymous function expressions 1`] = `


const obj = {
  render: function() {
    return <div>Anonymous function</div>
  }
}

const Component = function() {
  return <span>Unnamed function</span>
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

const obj = {
  render: function () {
    return <div>Anonymous function</div>;
  },
};
const Component = function () {
  return <span data-testid="Component.span">Unnamed function</span>;
};

`;

exports[`babel-plugin-react-data-testid-generator 12. multiple return statements: 12. multiple return statements 1`] = `


const ConditionalComponent = ({ show }) => {
  if (show) {
    return <div>Shown</div>
  }
  return <span>Hidden</span>
}

function EarlyReturn({ error }) {
  if (error) return <div>Error</div>
  
  return (
    <div>
      <p>Success</p>
    </div>
  )
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

const ConditionalComponent = ({ show }) => {
  if (show) {
    return <div data-testid="ConditionalComponent.div">Shown</div>;
  }
  return <span data-testid="ConditionalComponent.span">Hidden</span>;
};
function EarlyReturn({ error }) {
  if (error) return <div data-testid="EarlyReturn.div">Error</div>;
  return (
    <div data-testid="EarlyReturn.div2">
      <p data-testid="EarlyReturn.p">Success</p>
    </div>
  );
}

`;

exports[`babel-plugin-react-data-testid-generator 13. class without name: 13. class without name 1`] = `


export default class extends React.Component {
  render() {
    return <div>Anonymous class</div>
  }
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

export default class extends React.Component {
  render() {
    return <div data-testid="Component.div">Anonymous class</div>;
  }
}

`;

exports[`babel-plugin-react-data-testid-generator 14. non-render class methods: 14. non-render class methods 1`] = `


class TestClass extends React.Component {
  componentDidMount() {
    return <div>Should not be processed</div>
  }
  
  render() {
    return <div>Should be processed</div>
  }
  
  helperMethod() {
    return <span>Helper method</span>
  }
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

class TestClass extends React.Component {
  componentDidMount() {
    return <div>Should not be processed</div>;
  }
  render() {
    return <div data-testid="TestClass.div">Should be processed</div>;
  }
  helperMethod() {
    return <span>Helper method</span>;
  }
}

`;

exports[`babel-plugin-react-data-testid-generator 15. complex destructured assignment: 15. complex destructured assignment 1`] = `


const { Component: RenamedComponent } = React;
const [FirstComponent, SecondComponent] = components;

const Wrapper = () => {
  return (
    <div>
      <RenamedComponent />
      <FirstComponent />
    </div>
  )
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

const { Component: RenamedComponent } = React;
const [FirstComponent, SecondComponent] = components;
const Wrapper = () => {
  return (
    <div data-testid="Wrapper.div">
      <RenamedComponent data-testid="Wrapper.RenamedComponent" />
      <FirstComponent data-testid="Wrapper.FirstComponent" />
    </div>
  );
};

`;

exports[`edge cases 19. empty attributes configuration: 19. empty attributes configuration 1`] = `


const Div = () => <div />
      

      ↓ ↓ ↓ ↓ ↓ ↓

const Div = () => <div />;

`;

exports[`edge cases 20. array openingElement path (edge case): 20. array openingElement path (edge case) 1`] = `


const Div = () => <div />
      

      ↓ ↓ ↓ ↓ ↓ ↓

const Div = () => <div />;

`;

exports[`edge cases 21. Playwright data-test-id attribute: 21. Playwright data-test-id attribute 1`] = `


const PlaywrightButton = () => <button>Click me</button>
      

      ↓ ↓ ↓ ↓ ↓ ↓

const PlaywrightButton = () => (
  <button data-test-id="PlaywrightButton.button">Click me</button>
);

`;

exports[`edge cases 22. multiple testing framework attributes: 22. multiple testing framework attributes 1`] = `


const MultiFrameworkButton = () => (
  <div>
    <button>Test me</button>
    <input type="text" />
  </div>
)
      

      ↓ ↓ ↓ ↓ ↓ ↓

const MultiFrameworkButton = () => (
  <div
    data-pw="MultiFrameworkButton.div"
    data-test-id="MultiFrameworkButton.div"
    data-cy="MultiFrameworkButton.div"
    data-testid="MultiFrameworkButton.div"
  >
    <button
      data-pw="MultiFrameworkButton.button"
      data-test-id="MultiFrameworkButton.button"
      data-cy="MultiFrameworkButton.button"
      data-testid="MultiFrameworkButton.button"
    >
      Test me
    </button>
    <input
      data-pw="MultiFrameworkButton.input"
      data-test-id="MultiFrameworkButton.input"
      data-cy="MultiFrameworkButton.input"
      data-testid="MultiFrameworkButton.input"
      type="text"
    />
  </div>
);

`;

exports[`edge cases 23. component with existing attributes should not override: 23. component with existing attributes should not override 1`] = `


const ExistingComponent = () => (
  <div>
    <button data-testid="existing-id">Keep this ID</button>
    <span>New element</span>
  </div>
)
      

      ↓ ↓ ↓ ↓ ↓ ↓

const ExistingComponent = () => (
  <div>
    <button data-testid="existing-id">Keep this ID</button>
    <span>New element</span>
  </div>
);

`;

exports[`edge cases 24. non-JSX return statement: 24. non-JSX return statement 1`] = `


const StringComponent = () => {
  return "just a string"
}

const NumberComponent = () => {
  return 42
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

const StringComponent = () => {
  return "just a string";
};
const NumberComponent = () => {
  return 42;
};

`;

exports[`edge cases 25. function without identifier (anonymous): 25. function without identifier (anonymous) 1`] = `


const obj = {
  render: function() {
    return <div>No component name</div>
  },
  arrow: () => <span>Arrow in object</span>
}

// Function expression without name or parent variable declarator
export default function() {
  return <div>Unnamed export</div>
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

const obj = {
  render: function () {
    return <div>No component name</div>;
  },
  arrow: () => <span>Arrow in object</span>,
};

// Function expression without name or parent variable declarator
export default function () {
  return <div>Unnamed export</div>;
}

`;

exports[`edge cases 26. non-matching attribute name (hasDataAttribute false path): 26. non-matching attribute name (hasDataAttribute false path) 1`] = `


const ComponentWithMismatch = () => (
  <div data-other="different">
    <span data-wrong="attribute">Test</span>
  </div>
)
      

      ↓ ↓ ↓ ↓ ↓ ↓

const ComponentWithMismatch = () => (
  <div data-testid="ComponentWithMismatch.div" data-other="different">
    <span data-testid="ComponentWithMismatch.span" data-wrong="attribute">
      Test
    </span>
  </div>
);

`;

exports[`edge cases 27. component with destructured complex assignment: 27. component with destructured complex assignment 1`] = `


const { render: CustomRender } = {
  render: () => <div>Complex assignment</div>
}

const [FirstComponent] = [() => <span>Array destructured</span>]
      

      ↓ ↓ ↓ ↓ ↓ ↓

const { render: CustomRender } = {
  render: () => <div>Complex assignment</div>,
};
const [FirstComponent] = [() => <span>Array destructured</span>];

`;

exports[`edge cases 28. element with non-JSXIdentifier attribute (coverage line 12): 28. element with non-JSXIdentifier attribute (coverage line 12) 1`] = `


const TestComponent = () => (
  <div {...{someSpread: true}}>
    <span className="test">Text</span>
  </div>
)
      

      ↓ ↓ ↓ ↓ ↓ ↓

const TestComponent = () => (
  <div
    {...{
      someSpread: true,
    }}
  >
    <span className="test">Text</span>
  </div>
);

`;

exports[`edge cases 29. arrow function without variable declarator parent: 29. arrow function without variable declarator parent 1`] = `


// Arrow function in object property (no VariableDeclarator parent)
const config = {
  component: () => <div>No parent declarator</div>
}

// Arrow function as function argument
someFunction(() => <span>Argument function</span>)

// Arrow function with non-identifier declarator
const [, secondComponent] = [null, () => <div>Array destructured</div>]
      

      ↓ ↓ ↓ ↓ ↓ ↓

// Arrow function in object property (no VariableDeclarator parent)
const config = {
  component: () => <div>No parent declarator</div>,
};

// Arrow function as function argument
someFunction(() => <span>Argument function</span>);

// Arrow function with non-identifier declarator
const [, secondComponent] = [null, () => <div>Array destructured</div>];

`;

exports[`edge cases 30. function expression without identifier: 30. function expression without identifier 1`] = `


// Function expression assigned to object property
const obj = {
  method: function() {
    return <div>Object method</div>
  }
}

// Function expression as argument
callSomething(function() {
  return <span>Function argument</span>
})
      

      ↓ ↓ ↓ ↓ ↓ ↓

// Function expression assigned to object property
const obj = {
  method: function () {
    return <div>Object method</div>;
  },
};

// Function expression as argument
callSomething(function () {
  return <span>Function argument</span>;
});

`;

exports[`edge cases 31. component with spread attributes and existing data attrs: 31. component with spread attributes and existing data attrs 1`] = `


const SpreadComponent = (props) => (
  <div {...props} data-existing="keep">
    <button data-testid="existing-button">Keep this</button>
    <span>Add to this</span>
  </div>
)
      

      ↓ ↓ ↓ ↓ ↓ ↓

const SpreadComponent = (props) => (
  <div data-testid="SpreadComponent.div" {...props} data-existing="keep">
    <button data-testid="existing-button">Keep this</button>
    <span data-testid="SpreadComponent.span">Add to this</span>
  </div>
);

`;

exports[`with attributes 16. multiple attributes: 16. multiple attributes 1`] = `


function Div() {
  return <div />
}
      

      ↓ ↓ ↓ ↓ ↓ ↓

function Div() {
  return <div data-cy="Div.div" data-testid="Div.div" />;
}

`;

exports[`with attributes 17. with data-cy: 17. with data-cy 1`] = `


const Div = () => <div data-cy="hello" />
    

      ↓ ↓ ↓ ↓ ↓ ↓

const Div = () => <div data-testid="Div.div" data-cy="hello" />;

`;

exports[`with attributes 18. empty attributes array: 18. empty attributes array 1`] = `


const EmptyComponent = () => <div>No attributes</div>
      

      ↓ ↓ ↓ ↓ ↓ ↓

const EmptyComponent = () => (
  <div data-cy="EmptyComponent.div" data-testid="EmptyComponent.div">
    No attributes
  </div>
);

`;
